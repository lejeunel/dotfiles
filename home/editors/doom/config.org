#+TITLE: Doom Emacs configuration
#+AUTHOR: Laurent Lejeune
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../../org/styles/org.css"/>

* Introduction

This uses the [[https://github.com/doomemacs/doomemacs][doom-emacs]] configuration framework which provides sane defaults,
hence this personal config file is pretty minimal in itself.

* General Bindings

#+begin_src emacs-lisp :tangle yes
(map! :leader
    :desc "Kill buffer" "x" #'kill-this-buffer
    :desc "Switch buffer (Persp.)" "." #'persp-switch-to-buffer
    :desc "Switch buffer" ">" #'switch-to-buffer
    :desc "Expand region" "e" #'er/expand-region
    :desc "Increase font size" "+" #'doom/increase-font-size
    :desc "Decrease font size" "-" #'doom/decrease-font-size
    :desc "Next buffer" "k" #'iflipb-next-buffer
    :desc "Previous buffer" "j" #'iflipb-previous-buffer
    :desc "Search buffer" "/" #'+default/search-buffer
    :desc "Search buffer" "ps" #'+default/search-project
    :desc "Switch window" "TAB" #'ace-window)
#+end_src

Evil-mode does not conform precisely to vim's standard keybinding.
We reset these here:
#+begin_src emacs-lisp :tangle yes
(define-key evil-normal-state-map (kbd "C-a") 'evil-numbers/inc-at-pt)
(define-key evil-normal-state-map (kbd "C-x") 'evil-numbers/dec-at-pt)
#+end_src

Function that allow to move around selections:
#+begin_src emacs-lisp :tangle yes
(define-key evil-visual-state-map (kbd "K") 'drag-stuff-up)
(define-key evil-visual-state-map (kbd "J") 'drag-stuff-down)
#+end_src

* Appearance
Colors and fonts
#+begin_src emacs-lisp :tangle yes
(setq doom-theme 'catppuccin)
(setq catppuccin-flavor 'macchiato) ;; 'latte, 'frappe, 'macchiato, or 'mocha
;; (catppuccin-reload)

(setq doom-font (font-spec :family "JetBrainsMono Nerd Font" :size 21 :height 1.0 :weight 'normal))
#+end_src

Indentation guides
#+begin_src emacs-lisp :tangle yes
(setq highlight-indent-guides-auto-odd-face-perc 50)
(setq highlight-indent-guides-auto-even-face-perc 50)
(setq highlight-indent-guides-auto-character-face-perc 50)
(setq highlight-indent-guides-method 'character)
(setq highlight-indent-guides-responsive 'top)
(setq display-line-numbers-type 'relative)
#+end_src

Patch theme to use different font sizes in org headings.

#+begin_src emacs-lisp :tangle yes
(custom-theme-set-faces!
    'doom-dracula
        '(org-level-4 :inherit outline-4 :height 1.0)
        '(org-level-3 :inherit outline-3 :height 1.1)
        '(org-level-2 :inherit outline-2 :height 1.3)
        '(org-level-1 :inherit outline-1 :height 1.5)
        '(org-document-title :height 1.5 :underline nil))
#+end_src

Hide emphasis markups mark.
#+begin_src emacs-lisp :tangle yes
(setq org-hide-emphasis-markers t)
#+end_src

Show emphasis marker when cursor is on region.

#+begin_src emacs-lisp :tangle yes
(use-package! org-appear
  :defer t
  :config
  (setq org-appear-autolinks t))
(add-hook! org-mode :append #'org-appear-mode)
#+end_src

Force company to use fixed-pitch font
#+begin_src emacs-lisp :tangle yes
(use-package! company
  :defer t
  :custom-face
  (company-tooltip
   ((t (:family "JetBrainsMono Nerd Font" :height 1.0))))
  :config
        (define-key evil-insert-state-map (kbd "C-l") 'company-complete)
        (define-key company-active-map (kbd "RET") nil)
        (setq company-idle-delay 0.1)
        (setq company-tooltip-idle-delay 0.1)
  )
#+end_src

* LaTeX
Bind main AucTex menu:

#+begin_src emacs-lisp :tangle yes
(map! :localleader
      :map LaTeX-mode-map
      :desc "Master"    "m" 'TeX-command-master)
#+end_src

Setup default compilation engine.

- The first element of the list is the symbol that AucTeX recognizes.
- The second element is a string with the name of the TeX distribution.
- The third element is the shell command for compiling plain TeX documents.
- The fourth element is the shell command for compiling LaTeX documents.
   Here we are assuming the user is using a Tectonic project (generated using ~tectonic -X new <proj-name>~).
- The last element is the shell command for compiling ConTeXt documents, left unconfigured for now.

#+begin_src emacs-lisp :tangle yes
(setq TeX-engine-alist '((default
                          "Tectonic"
                          "tectonic -X compile -f plain %T"
                          "tectonic -X watch"
                          nil)))
#+end_src

Next, modify the ~LaTeX-command-style~ so that AucTex doesn’t add extra options to it that Tectonic does not recognize.
We simply set it to the ~%(latex)~ expansion (from ~TeX-expand-list-builtin~), removing any other extra options.

#+begin_src emacs-lisp :tangle yes
(setq LaTeX-command-style '(("" "%(latex)")))
#+end_src

We need to set the ~TeX-check-TeX~ variable to ~nil~ since AucTeX will try to find a traditional distribution like ~TeXLive~ or others, and will fail since Tectonic doesn’t meet its criteria.

Additionally, we should also set ~TeX-process-asynchronous~ to ~t~, so that running Tectonic in watch mode doesn’t hang up Emacs.

We’ll also just ensure that the ~TeX-engine~ is set to ~default~.

#+begin_src emacs-lisp :tangle yes
(setq TeX-process-asynchronous t
      TeX-check-TeX nil
      TeX-engine 'default)
#+end_src

Finally, modify the ~TeX-command-list~ to use the appropriate commands and not pass in extra metadata and options to Tectonic that cause it to error out. This needs to be done in place.

#+begin_src emacs-lisp :tangle yes
(add-hook! LaTeX-mode
(let ((tex-list (assoc "TeX" TeX-command-list))
      (latex-list (assoc "LaTeX" TeX-command-list)))
  (setf (cadr tex-list) "%(tex)"
        (cadr latex-list) "%l")))
#+end_src

* Typopunct

#+begin_src emacs-lisp :tangle yes
(use-package! typopunct
  :defer t
  :config
  (typopunct-change-language 'french t))
  #+end_src

* Languagetool
Download standalone [[https://languagetool.org/][LanguageTool]] server from https://languagetool.org/download/LanguageTool-stable.zip and unzip, then set these variables:

#+begin_src emacs-lisp :tangle yes
(setq langtool-language-tool-jar (concat (getenv "HOME") "/bin/LanguageTool-5.2/languagetool-commandline.jar"))

(defun langtool-autoshow-detail-popup (overlays)
  (when (require 'popup nil t)
    ;; Do not interrupt current popup
    (unless (or popup-instances
                ;; suppress popup after type `C-g` .
                (memq last-command '(keyboard-quit)))
      (let ((msg (langtool-details-error-message overlays)))
        (popup-tip msg)))))
(setq langtool-autoshow-message-function
      'langtool-autoshow-detail-popup)

#+end_src

* YAML
#+begin_src emacs-lisp :tangle yes
(use-package! yaml-mode
  :defer t
  :mode ("\\.ya?ml\\'" . yaml-mode))
#+end_src

* Python
** Interpreter
#+begin_src emacs-lisp :tangle yes
(setq python-shell-interpreter "ipython"
    python-shell-interpreter-args "-i --simple-prompt")
#+end_src
** Breakpoints

Bindings and functions to add and highlight breakpoints.
#+begin_src emacs-lisp :tangle yes
(defvar python--pdb-breakpoint-string "breakpoint()")
(defun python-add-breakpoint ()
"Inserts a python breakpoint using `pdb'"
    (interactive)
    (back-to-indentation)
    ;; this preserves the correct indentation in case the line above
    ;; point is a nested block
    (split-line)
    (insert python--pdb-breakpoint-string)
    (python-set-debug-highlight))


(defun python-set-debug-highlight ()
    (interactive)
    (highlight-lines-matching-regexp "breakpoint[.]?" 'hi-red-b))

(defun python-add-debug-highlight ()
    "Adds a highlighter for use by `python--pdb-breakpoint-string'"
    (interactive)
    (python-set-debug-highlight))
    (add-hook 'python-mode-hook 'python-add-debug-highlight)

(map! :localleader
      :map python-mode-map
      :desc "Insert breakpoint"    "d" 'python-add-breakpoint)
#+end_src

** Docstrings

Generate numpy-style docstring automatically from function definition
with [[https://github.com/douglasdavis/numpydoc.el][numpydoc.el]].

#+begin_src emacs-lisp :tangle yes
(use-package! numpydoc
  :defer t
  :init
  (setq numpydoc-insertion-style 'yas))

(map! :localleader
      :map python-mode-map
      :desc "Auto docstring"  "s" 'numpydoc-generate)
#+end_src

* Harpoon.el
#+begin_src emacs-lisp :tangle yes
(map! :leader
      (:prefix-map ("r" . "Harpoon")
       (:desc "Menu" "m" #'harpoon-quick-menu-hydra
        :desc "Add file" "a" #'harpoon-add-file
        :desc "Edit file" "r" #'harpoon-toggle-file
        :desc "Clear" "c" 'harpoon-clear)))

(map! :leader "1" 'harpoon-go-to-1)
(map! :leader "2" 'harpoon-go-to-2)
(map! :leader "3" 'harpoon-go-to-3)
(map! :leader "4" 'harpoon-go-to-4)
#+end_src
* Org

#+begin_src emacs-lisp :tangle yes
(setq org-export-use-babel t)
(setq org-directory "~/org/")
(load-library "ox-reveal")
(setq org-latex-pdf-process '("tectonic %f"))
(setq org-export-in-background t)
#+end_src

Set PDF viewer.
#+begin_src emacs-lisp :tangle yes
(add-to-list 'org-file-apps '("\\.pdf\\'" . "zathura %s"))
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package! org-auto-tangle
  :defer t
  :hook (org-mode . org-auto-tangle-mode)
  :config
  (setq org-auto-tangle-default t))
#+end_src

** Backends/Exporters

A couple custom LaTeX classes.

#+begin_src emacs-lisp :tangle yes
(after! ox-latex
    (add-to-list 'org-latex-classes
                '("koma-article" "\\documentclass{scrartcl}"
                ("\\section{%s}" . "\\section*{%s}")
                ("\\subsection{%s}" . "\\subsection*{%s}")
                ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                ("\\paragraph{%s}" . "\\paragraph*{%s}")
                ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

    (add-to-list 'org-latex-classes
                '("koma-article-fr" "\\documentclass[french]{scrartcl}"
                ("\\section{%s}" . "\\section*{%s}")
                ("\\subsection{%s}" . "\\subsection*{%s}")
                ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                ("\\paragraph{%s}" . "\\paragraph*{%s}")
                ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

    (add-to-list 'org-latex-classes
                '("memoir-fr"
                "\\documentclass[a4paper,11pt,titlepage, twoside]{memoir}
                    \\usepackage[utf8]{inputenc}
                    \\usepackage[T1]{fontenc}
                    \\usepackage{fixltx2e}
                    \\usepackage{hyperref}
                    \\usepackage{mathpazo}
                    \\usepackage{color}
                    \\usepackage{enumerate}
                    \\definecolor{bg}{rgb}{0.95,0.95,0.95}
                    \\tolerance=1000
                    \\linespread{1.1}
                    \\hypersetup{pdfborder=0 0 0}"
                ("\\chapter{%s}" . "\\chapter*{%s}")
                ("\\section{%s}" . "\\section*{%s}")
                ("\\subsection{%s}" . "\\subsection*{%s}")
                ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                ("\\paragraph{%s}" . "\\paragraph*{%s}")
                ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

    (add-to-list 'org-latex-classes
                '("TMI"
                "\\documentclass[journal, web, twoside]{ieeecolor}"
                ("\\section{%s}" . "\\section*{%s}")
                ("\\subsection{%s}" . "\\subsection*{%s}")
                ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                ("\\paragraph{%s}" . "\\paragraph*{%s}")
                ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

)
#+end_src


Detect french-style quotes when exporting

#+begin_src emacs-lisp :tangle no
(after! ox
    (setq fr-quotes '("fr"
                    (primary-opening :utf-8 "« " :html "&laquo;&nbsp;" :latex "\\enquote{" :texinfo "@guillemetleft{}@tie{}")
                    (primary-closing :utf-8 " »" :html "&nbsp;&raquo;" :latex "}" :texinfo "@tie{}@guillemetright{}")
                    (secondary-opening :utf-8 "« " :html "&laquo;&nbsp;" :latex "\\\enquote{" :texinfo "@guillemetleft{}@tie{}")
                    (secondary-closing :utf-8 " »" :html "&nbsp;&raquo;" :latex "\\}" :texinfo "@tie{}@guillemetright{}")
                    (apostrophe :utf-8 "’" :html "&rsquo;")))
    (add-to-list 'org-export-smart-quotes-alist fr-quotes))
#+end_src

Exporter for the [[https://github.com/posquit0/Awesome-CV][awesome-cv]] latex class.
#+begin_src emacs-lisp :tangle yes
(use-package! ox-awesomecv
  :after org)
#+end_src

When exporting to HTML, force code block background to use current theme color, otherwise,
things may end up not readable when using dark themes.

#+begin_src emacs-lisp :tangle yes
(defun my/org-inline-css-hook (exporter)
  "Insert custom inline css to automatically set the
background of code to whatever theme I'm using's background"
  (when (eq exporter 'html)
    (let* ((my-pre-bg (face-background 'default))
           (my-pre-fg (face-foreground 'default)))
      (setq
       org-html-head-extra
       (concat
        org-html-head-extra
        (format "<style type=\"text/css\">\n pre.src {background-color: %s; color: %s;}</style>\n"
                my-pre-bg my-pre-fg))))))

(add-hook 'org-export-before-processing-hook 'my/org-inline-css-hook)
#+end_src

** Org-ref / bibtex
- We define in ~org-ref-default-bibliography~ a default ~bib~ file.
- We use [[https://tectonic-typesetting.github.io/en-US/][tectonic]]  to generate ~pdf~ files from LaTeX.

#+begin_src emacs-lisp :tangle yes
(use-package! org-ref
  :defer t
    :init
        (setq org-ref-bibliography-notes "~/org/paper-notes/paper-notes.org"
            org-ref-default-bibliography "~/org/refs.bib"
            bibtex-completion-bibliography org-ref-default-bibliography
            bibtex-completion-notes-path "~/org/paper-notes/paper-notes.org"
            bibtex-completion-pdf-open-function
                (lambda (fpath)
                (call-process "zathura" nil 0 nil fpath))))

(map! :localleader
      :map org-mode-map
      :desc "Insert citation" "c" 'org-cite-insert)
#+end_src

* Others

#+begin_src emacs-lisp :tangle yes
(after! counsel
  (setq counsel-rg-base-command "rg -M 240 --with-filename --no-heading --line-number --color never %s || true"))
#+end_src

#+begin_src emacs-lisp :tangle yes
(after! iflipb
  (setq iflipb-ignore-buffers "$^")
  )
#+end_src

Enable tree-sitter syntax highlighting for all languages.

#+begin_src emacs-lisp :tangle yes
(setq +tree-sitter-hl-enabled-modes t)
#+end_src
